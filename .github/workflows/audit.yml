name: Security Audit

on:
  schedule:
    - cron: "0 12 * * 1" # Weekly on Monday at 12:00
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  audit:
    name: Audit Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Audit dependencies
        id: audit
        run: |
          AUDIT_OUTPUT=$(npm audit --audit-level=moderate --json 2>/dev/null || true)
          echo "audit_output<<EOF" >> $GITHUB_OUTPUT
          echo "$AUDIT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          npm audit --audit-level=moderate || echo "::warning::npm audit found vulnerabilities"

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: |
            package-lock.json
            package.json
          retention-days: 7

      - name: Create issue if vulnerable
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const auditOutput = `${{ steps.audit.outputs.audit_output }}`;
              let auditData = {};
              let vulnerabilitySummary = 'Unable to parse audit details';
              
              try {
                auditData = JSON.parse(auditOutput);
                if (auditData.metadata && auditData.metadata.vulnerabilities) {
                  const vulns = auditData.metadata.vulnerabilities;
                  vulnerabilitySummary = `Vulnerabilities found:
                  - Critical: ${vulns.critical || 0}
                  - High: ${vulns.high || 0}
                  - Moderate: ${vulns.moderate || 0}
                  - Low: ${vulns.low || 0}`;
                }
              } catch (parseError) {
                console.error('Failed to parse audit output:', parseError.message);
                vulnerabilitySummary = 'Failed to parse audit output. Check workflow artifacts for details.';
              }
              
              let existingIssues;
              try {
                existingIssues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['security', 'vulnerability'],
                  state: 'open'
                });
              } catch (apiError) {
                console.error('Failed to fetch existing issues:', apiError.message);
                existingIssues = { data: [] };
              }
              
              const existingIssue = existingIssues.data.find(issue => 
                issue.title.includes('Security vulnerabilities detected') || 
                issue.title.includes('🚨 Security vulnerabilities detected')
              );
              
              if (existingIssue) {
                console.warn('Security issue already exists: #' + existingIssue.number);
                return;
              }
              
              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: '🚨 Security vulnerabilities detected in dependencies',
                  body: `## Security Audit Report
                  
                  npm audit found vulnerabilities that require attention.
                  
                  **Vulnerability Summary:**
                  \`\`\`
                  ${vulnerabilitySummary}
                  \`\`\`
                  
                  **Next Steps:**
                  1. Run \`npm audit fix\` to attempt automatic fixes
                  2. Review the full audit report in the workflow artifacts
                  3. Update vulnerable dependencies manually if needed
                  
                  **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  
                  *This issue was automatically generated by the security audit workflow.*`,
                  labels: ['security', 'vulnerability', 'automated']
                });
              } catch (createError) {
                console.error('Failed to create security issue:', createError.message);
              }
              
            } catch (outerError) {
              console.error('Unexpected error in Create issue step:', outerError.message);
            }

      - name: Comment on PR if vulnerable
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const auditOutput = `${{ steps.audit.outputs.audit_output }}`;
              let vulnerabilitySummary = '## 🔒 Security Audit Results\n\nSecurity vulnerabilities detected by npm audit. Please run `npm audit` to review and fix these issues before merging.';
              
              try {
                const auditData = JSON.parse(auditOutput);
                if (auditData.metadata && auditData.metadata.vulnerabilities) {
                  const vulns = auditData.metadata.vulnerabilities;
                  vulnerabilitySummary = `## 🔒 Security Audit Results
                  
                  Vulnerabilities found in this PR:
                  - ⚠️ Critical: ${vulns.critical || 0}
                  - 🔴 High: ${vulns.high || 0}
                  - 🟡 Moderate: ${vulns.moderate || 0}
                  - 🔵 Low: ${vulns.low || 0}
                  
                  Please run \`npm audit\` to review and fix these issues before merging.`;
                }
              } catch (parseError) {
                console.error('Failed to parse audit output for PR comment:', parseError.message);
                vulnerabilitySummary = '## 🔒 Security Audit Results\n\nSecurity vulnerabilities detected. Please check the workflow artifacts for detailed audit results.';
              }
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: vulnerabilitySummary
                });
              } catch (commentError) {
                console.error('Failed to create PR comment:', commentError.message);
              }
              
            } catch (outerError) {
              console.error('Unexpected error in PR comment step:', outerError.message);
            }
